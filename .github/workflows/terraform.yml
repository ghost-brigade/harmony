name: "Terraform CI"

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - "terraform/**"
  pull_request:
    paths:
      - "terraform/**"

defaults:
  run:
    working-directory: ./terraform

env:
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
  TF_VAR_environment: ${{ vars.TF_VAR_ENV }}
  TF_VAR_app_name: ${{ vars.TF_VAR_APP_NAME }}
  TF_VAR_google_project_id: ${{ secrets.TF_VAR_GOOGLE_PROJECT_ID }}
  TF_VAR_google_region: ${{ vars.TF_VAR_GOOGLE_REGION }}
  TF_VAR_mongodbatlas_public_key: ${{ secrets.TF_VAR_MONGODBATLAS_PUBLIC_KEY }}
  TF_VAR_mongodbatlas_private_key: ${{ secrets.TF_VAR_MONGODBATLAS_PRIVATE_KEY }}
  TF_VAR_mongodbatlas_org_id: ${{ secrets.TF_VAR_MONGODBATLAS_ORG_ID }}
  TF_VAR_mongodbatlas_database_password: ${{ secrets.TF_VAR_MONGODBATLAS_DATABASE_PASSWORD }}
  TF_VAR_cloudflare_api_token: ${{ secrets.TF_VAR_CLOUDFLARE_API_TOKEN }}
  TF_VAR_cloudflare_zone_id: ${{ secrets.TF_VAR_CLOUDFLARE_ZONE_ID }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ env.GOOGLE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
